package io.kzw.advance._02_bit_hex;

/**
 * java进制转换.
 *
 * @author kzw on 2018/09/15.
 */
public final class _01_Hex {

    /**
     * int n1 = 14;
     *
     * 十进制转成十六进制：Integer.toHexString(n1);
     *
     * 十进制转成八进制：Integer.toOctalString(n1);
     *
     * 十进制转成二进制：Integer.toBinaryString(12);
     *
     * 十六进制转成十进制：Integer.valueOf("FFFF",16).toString();
     *
     * 十六进制转成二进制：Integer.toBinaryString(Integer.valueOf("FFFF",16));
     *
     * 十六进制转成八进制：Integer.toOctalString(Integer.valueOf("FFFF",16));
     *
     * 八进制转成十进制：Integer.valueOf("576",8).toString();
     *
     * 八进制转成二进制：Integer.toBinaryString(Integer.valueOf("23",8));
     *
     * 八进制转成十六进制：Integer.toHexString(Integer.valueOf("23",8));
     *
     * 二进制转十进制：Integer.valueOf("0101",2).toString();
     *
     * 二进制转八进制：Integer.toOctalString(Integer.parseInt("0101", 2));
     *
     * 二进制转十六进制：Integer.toHexString(Integer.parseInt("0101", 2));
     */

    /*
     * ###### 1. 首先区分
     *
     * 2进制，只有0和1组成（小于2），如: 010101            运算时逢二进一
     * 8进制，以0开头，0～7组成（小于8），如：012345        运算时逢八进一
     * 10进制，以 1～9 开头，0～9组成（小于10），如：100    运算时逢十进一
     * 16进制，以0x开头，0～9或者a~f组成，如：0x12c        运算时逢十六进一
     */

    /*
     * ###### 2. 十进制转二进制
     *
     * 方法为：十进制数除2取余法，即十进制数除2，余数为权位上的数，得到的商值继续除2，依此步骤继续向下运算直到商为0为止。
     *
     * 如150：
     *
     * 150 % 2 = 75 余 0
     * 75 % 2 = 37 余 1
     * 37 % 2 = 18 余 1
     * 18 % 2 = 9 余 0
     * 9 % 2 = 4 余 1
     * 4 % 2 = 2 余 0
     * 2 % 2 = 1 余 0
     * 1 % 2 = 0 余 1
     *
     * 除到商为0为止，然后逆序。
     * 所以150的二进制为：10010110
     */

    /*
     * ###### 3. 二进制转十进制
     *
     * 方法为：把二进制数按权展开、相加即得十进制数。
     *
     * 如10010110：
     * 总共8位。
     *
     * 1 * 2^7 + 0 * 2^6 + 0 * 2^5 + 1 * 2^4 + 0 * 2^3 + 1 * 2^2 + 1 * 2^1 + 0 * 2^0
     * = 128 + 0 + 0 + 16 + 0 + 4 + 2 + 0
     * = 150
     */

    /*
     * ###### 4. 二进制转八进制
     *
     * 方法为：3位二进制数按权展开，相加得到1位八进制数（注意：从右向左分，分割成3位时，不足补0）。
     *
     * 如：10010110
     *
     * 010 010 110  （凑9位，第一位补0）
     *
     * 0 * 2^2 + 1 * 2^1 + 0 * 2^0 = 2
     * 0 * 2^2 + 1 * 2^1 + 0 * 2^0 = 2
     * 1 * 2^2 + 1 * 2^1 + 0 * 2^0 = 6
     *
     * 八进制为：226
     */

    /*
     * ###### 5. 八进制转成二进制
     *
     * 方法为：八进制数通过除2取余法，得到二进制数，对每个八进制为3个二进制，不足时在最左边补零。
     *
     * 如：226
     *
     * 2 ->  2 % 2 = 1 余 0
     *       1 % 2 = 0 余 1
     *       -------- 010
     *
     * 2 ->  2 % 2 = 1 余 0
     *       1 % 2 = 0 余 1
     *       -------- 010
     *
     * 6 ->  6 % 2 = 3 余 0
     *       3 % 2 = 1 余 1
     *       1 % 2 = 0 余 1
     *       -------- 110
     *
     * 10010110 （去掉第一个的0）
     */

    /*
     * ###### 6. 二进制转十六进制
     *
     * 方法为：与二进制转八进制方法近似，八进制是取三合一，十六进制是取四合一，不足时补0（从右向左分）。
     *
     * 如：100101100
     *
     * 0001 : 0 * 2^3 + 0 * 2^2 + 0 * 2^1 + 1 * 2^0 = 1
     * 0010 : 0 * 2^3 + 0 * 2^2 + 1 * 2^1 + 0 * 2^0 = 2
     * 1100 : 1 * 2^3 + 1 * 2^2 + 0 * 2^1 + 0 * 2^0 = 12
     *
     * 12超过了9，对应C
     *
     * 12C
     */

    /*
     * ###### 7. 十六进制转二进制
     *
     * 方法为：十六进制数通过除2取余法，得到二进制数，对每个十六进制为4个二进制，不足时在最左边补零。
     *
     * 如: 12C
     *
     * 1 : 1 % 2 = 0 余 1
     *     ------ 0001
     *
     * 2 : 2 % 2 = 1 余 0
     *     1 % 2 = 0 余 1
     *     ------ 0010
     *
     * C(12): 12 % 2 = 6 余 0
     *        6 % 2 = 3 余 0
     *        3 % 2 = 1 余 1
     *        1 % 2 = 0 余 1
     *        ------- 1100
     *
     * 100101100
     */

    /*
     * ###### 8. 其他转换
     *
     * ####### 十进制与八进制与十六进制之间的转换
     *
     * 十进制转八进制或者十六进制有两种方法
     *
     * 第一：间接法—把十进制转成二进制，然后再由二进制转成八进制或者十六进制。这里不再做图片用法解释。
     * 第二：把十进制转八进制或者十六进制按照除8或者16取余，直到商为0为止。
     *
     * ####### 八进制或者十六进制转成十进制
     *
     * 方法为：把八进制、十六进制数按权展开、相加即得十进制数。
     *
     * ####### 十六进制与八进制之间的转换
     *
     * 八进制与十六进制之间的转换有两种方法第一种：他们之间的转换可以先转成二进制然后再相互转换。
     * 第二种：他们之间的转换可以先转成十进制然后再相互转换。这里就不再进行图片用法解释。
     */

    public static void main(String[] args) {
        // ====== 十进制转二进制 =======
        int n = 298;
        /*
         * 298 % 2 = 149 ... 0
         * 149 % 2 = 74 ... 1
         * 74 % 2 = 37 ... 0
         * 37 % 2 = 18 ... 1
         * 18 % 2 = 9 ... 0
         * 9 % 2 = 4 ... 1
         * 4 % 2 = 2 ... 0
         * 2 % 2 = 1 ... 0
         * 1 % 2 = 0 ... 1
         *
         * 100101010
         */
        System.out.println(Integer.toBinaryString(n));

        // ====== 二进制转十进制 ======
        /*
         * 100110010
         *
         * 1*2^8 + 0*2^7 + 0*2^6 + 1*2^5 + 1*2^4 + 0*2^3 + 0*2^2 + 1*2^1 + 0*2^0
         * = 256 + 0 + 0 + 32 + 16 + 0 + 0 + 2 + 0
         * = 306
         */
        // Integer.valueOf最终是转成10进制输出
        System.out.println(Integer.valueOf("100110010", 2));

        // ====== 二进制转八进制 ======
        /*
         * 0110110
         *
         * 000 : 0*2^2 + 0*2^1 + 0*2^0 = 0
         * 110 : 1*2^2 + 1*2^1 + 0*2^0 = 6
         * 110 : 1*2^2 + 1*2^1 + 0*2^0 = 6
         *
         * 066，将第一个补的0去掉，最终为66
         */
        System.out.println(Integer.toOctalString(Integer.parseInt("0110110", 2)));

        // ====== 八进制转成二进制 ======
        /*
         * 53 （以0开头，0～7组成（小于8））
         *
         * 5 : 5 % 2 = 2 ... 1
         *     2 % 2 = 1 ... 0
         *     1 % 2 = 0 ... 1
         *     -------- 101
         *
         * 3 : 3 % 2 = 1 ... 1
         *     1 % 2 = 0 ... 1
         *     -------- 011
         *
         * 101011
         */
        System.out.println(Integer.toBinaryString(Integer.valueOf("53",8)));

        // ====== 二进制转十六进制 ======
        /*
         * 0111001
         *
         * 0011: 0*2^3 + 0*2^2 + 1*2^1 + 1*2^0 = 3
         * 1001: 1*2^3 + 0*2^2 + 0*2^1 + 1*2^0 = 9
         *
         * 39
         */
        System.out.println(Integer.toHexString(Integer.parseInt("0111001", 2)));

        // ====== 十六进制转二进制 ======
        /*
         * 783
         *
         * 7: 7 % 2 = 3...1
         *    3 % 2 = 1...1
         *    1 % 2 = 0...1
         *    ------ 0111
         *
         * 8: 8 % 2 = 4...0
         *    4 % 2 = 2...0
         *    2 % 2 = 1...0
         *    1 % 2 = 0...1
         *    ------ 1000
         *
         * 3: 3 % 2 = 1...1
         *    1 % 2 = 0...1
         *    ------ 0011
         *
         * 011110000011，去掉第一个补的0
         * 11110000011
         */
        System.out.println(Integer.toBinaryString(Integer.valueOf("783",16)));
    }
}
